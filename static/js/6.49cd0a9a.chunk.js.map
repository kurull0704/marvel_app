{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/giphy.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.49cd0a9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n// import Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../spinner/Spinner';\n\nconst RandomChar = () => {\n\tconst [char, setChar] = useState({});\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t\tconst timerId = setInterval(updateChar, 60000);\n\n\t\treturn () => {\n\t\t\tclearInterval(timerId)\n\t\t}\n\t}, [])\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n\t\tgetCharacter(id)\n\t\t\t.then(onCharLoaded)\n\t}\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error) ? <View char={char} /> : null;\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br />\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</p>\n\t\t\t\t<button onClick={updateChar} className=\"button button__main\">\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nconst View = ({ char }) => {\n\tconst { name, description, thumbnail, homepage, wiki } = char;\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'contain' };\n\t}\n\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n\tconst [charList, setCharList] = useState([]);\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\n\tconst [offset, setOffset] = useState(210);\n\tconst [charEnded, setCharEnded] = useState(false);\n\n\tconst { loading, error, getAllCharacters } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tonRequest(offset, true);\n\t}, [])\n\n\tconst onRequest = (offset, initial) => {\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true);\n\t\tgetAllCharacters(offset)\n\t\t\t.then(onCharListLoaded)\n\t}\n\n\tconst onCharListLoaded = (newCharList) => {\n\t\tlet ended = false;\n\t\tif (newCharList.length < 9) {\n\t\t\tended = true;\n\t\t}\n\n\t\tsetCharList(charList => [...charList, ...newCharList])\n\t\tsetNewItemLoading(newItemLoading => false);\n\t\tsetOffset(offset => offset + 9);\n\t\tsetCharEnded(charEnded => ended);\n\n\t}\n\n\tconst itemRefs = useRef([]);\n\n\tconst focusOnItem = (id) => {\n\t\t// Я реализовал вариант чуть сложнее, и с классом и с фокусом\n\t\t// Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n\t\t// На самом деле, решение с css-классом можно сделать, вынеся персонажа\n\t\t// в отдельный компонент. Но кода будет больше, появится новое состояние\n\t\t// и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n\t\t// По возможности, не злоупотребляйте рефами, только в крайних случаях\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\t\titemRefs.current[id].classList.add('char__item_selected');\n\t\titemRefs.current[id].focus();\n\t}\n\n\t// Этот метод создан для оптимизации, \n\t// чтобы не помещать такую конструкцию в метод render\n\tfunction renderItems(arr) {\n\t\tconst items = arr.map((item, i) => {\n\t\t\tlet imgStyle = { 'objectFit': 'cover' };\n\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\t\t\timgStyle = { 'objectFit': 'unset' };\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li\n\t\t\t\t\tclassName=\"char__item\"\n\t\t\t\t\ttabIndex={0}\n\t\t\t\t\tref={el => itemRefs.current[i] = el}\n\t\t\t\t\tkey={item.id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t}}\n\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\n\t\t\t\t\t\t\tprops.onCharSelected(item.id);\n\t\t\t\t\t\t\tfocusOnItem(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}>\n\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle} />\n\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\n\t\t\t\t</li>\n\t\t\t)\n\t\t});\n\t\t// А эта конструкция вынесена для центровки спиннера/ошибки\n\t\treturn (\n\t\t\t<ul className=\"char__grid\">\n\t\t\t\t{items}\n\t\t\t</ul>\n\t\t)\n\t}\n\n\n\tconst items = renderItems(charList);\n\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading & !newItemLoading ? <Spinner /> : null;\n\n\treturn (\n\t\t<div className=\"char__list\">\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{items}\n\t\t\t<button\n\t\t\t\tclassName=\"button button__main button__long\"\n\t\t\t\tdisabled={newItemLoading}\n\t\t\t\tstyle={{ 'display': charEnded ? 'none' : 'block' }}\n\t\t\t\tonClick={() => onRequest(offset)}>\n\t\t\t\t<div className=\"inner\">load more</div>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nCharList.propTypes = {\n\tonCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n\tconst [char, setChar] = useState(null);\n\n\tconst { loading, error, getCharacter, clearError } = useMarvelService();\n\n\tuseEffect(() => {\n\t\tupdateChar();\n\t}, [props.charId])\n\n\tconst updateChar = () => {\n\t\tconst { charId } = props;\n\t\tif (!charId) {\n\t\t\treturn;\n\t\t}\n\t\tclearError()\n\t\tgetCharacter(charId)\n\t\t\t.then(onCharLoaded)\n\n\t}\n\n\tconst onCharLoaded = (char) => {\n\t\tsetChar(char);\n\t}\n\n\n\tconst skeleton = char || loading || error ? null : <Skeleton />;\n\tconst errorMessage = error ? <ErrorMessage /> : null;\n\tconst spinner = loading ? <Spinner /> : null;\n\tconst content = !(loading || error || !char) ? <View char={char} /> : null;\n\n\treturn (\n\t\t<div className=\"char__info\">\n\t\t\t{skeleton}\n\t\t\t{errorMessage}\n\t\t\t{spinner}\n\t\t\t{content}\n\t\t</div>\n\t)\n}\n\nconst View = ({ char }) => {\n\tconst { name, description, thumbnail, homepage, wiki, comics } = char;\n\n\tlet imgStyle = { 'objectFit': 'cover' };\n\tif (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n\t\timgStyle = { 'objectFit': 'contain' };\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"char__basics\">\n\t\t\t\t<img src={thumbnail} alt={name} style={imgStyle} />\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\n\t\t\t\t\t<div className=\"char__btns\">\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"char__descr\">\n\t\t\t\t{description}\n\t\t\t</div>\n\t\t\t<div className=\"char__comics\">Comics:</div>\n\t\t\t<ul className=\"char__comics-list\">\n\t\t\t\t{comics.length > 0 ? null : 'There is no comics with this character'}\n\t\t\t\t{\n\t\t\t\t\tcomics.map((item, i) => {\n\t\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\t\tif (i > 9) return;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={i} className=\"char__comics-item\">\n\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</>\n\t)\n}\n\nCharInfo.propTypes = {\n\tcharId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n\tconst [char, setChar] = useState(null);\r\n\tconst { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char);\r\n\t}\r\n\r\n\tconst updateChar = (name) => {\r\n\t\tclearError();\r\n\r\n\t\tgetCharacterByName(name)\r\n\t\t\t.then(onCharLoaded);\r\n\t}\r\n\r\n\tconst errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\tconst results = !char ? null : char.length > 0 ?\r\n\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t<div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n\t\t\t<Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n\t\t\t\t<div className=\"inner\">To page</div>\r\n\t\t\t</Link>\r\n\t\t</div> :\r\n\t\t<div className=\"char__search-error\">\r\n\t\t\tThe character was not found. Check the name and try again\r\n\t\t</div>;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__search-form\">\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{\r\n\t\t\t\t\tcharName: ''\r\n\t\t\t\t}}\r\n\t\t\t\tvalidationSchema={Yup.object({\r\n\t\t\t\t\tcharName: Yup.string().required('This field is required')\r\n\t\t\t\t})}\r\n\t\t\t\tonSubmit={({ charName }) => {\r\n\t\t\t\t\tupdateChar(charName);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n\t\t\t\t\t<div className=\"char__search-wrapper\">\r\n\t\t\t\t\t\t<Field\r\n\t\t\t\t\t\t\tid=\"charName\"\r\n\t\t\t\t\t\t\tname='charName'\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tplaceholder=\"Enter name\" />\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\t\tclassName=\"button button__main\"\r\n\t\t\t\t\t\t\tdisabled={loading}>\r\n\t\t\t\t\t\t\t<div className=\"inner\">find</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n\t\t\t\t</Form>\r\n\t\t\t</Formik>\r\n\t\t\t{results}\r\n\t\t\t{errorMessage}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false,\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo)\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn <ErrorMessage />\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n\tconst [selectedChar, setChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetChar(id);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<meta\r\n\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\tcontent=\"Marvel information portal\"\r\n\t\t\t\t/>\r\n\t\t\t\t<title>Marvel information portal</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharSearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/giphy.50f8a7ca.gif\";","import img from './giphy.gif'\r\n\r\n\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }}\r\n\t\t\tsrc={img} alt=\"Error\" />\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\tconst { loading, request, error, clearError } = useHttp();\r\n\r\n\tconst _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n\t// ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n\tconst _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\r\n\tconst _baseOffset = 210;\r\n\r\n\r\n\r\n\tconst getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\t// Вариант модификации готового метода для поиска по имени. \r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t}\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t}\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n\tconst _transformCharacter = (char) => {\r\n\t\treturn {\r\n\t\t\tid: char.id,\r\n\t\t\tname: char.name,\r\n\t\t\tdescription: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n\t\t\tthumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items\r\n\t\t}\r\n\t}\r\n\r\n\tconst _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || 'There is no description',\r\n\t\t\tpageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n\t\t\tthumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects.language || 'en-us',\r\n\t\t\tprice: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\r\n\t\t}\r\n\t}\r\n\r\n\treturn { loading, error, clearError, getAllCharacters, getCharacterByName, getCharacter, getAllComics, getComic }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tconst request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n\t\tsetLoading(true);\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method, body, headers });\r\n\r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tthrow new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\t\t\t}\r\n\r\n\t\t\tconst data = await response.json();\r\n\r\n\t\t\tsetLoading(false);\r\n\t\t\treturn data;\r\n\t\t} catch (e) {\r\n\t\t\tsetLoading(false);\r\n\t\t\tsetError(e.message);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst clearError = useCallback(() => setError(null), []);\r\n\r\n\treturn { loading, request, error, clearError }\r\n}"],"sourceRoot":""}